/**
 * Author:
 *   Jennifer Hernandez Becares
 *   Luis Maria Costero Valero
 * Doble Grado en Ing. Informática-Matemáticas
 * Curso 2013/2014 - PLG
*/


//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Jun 02 15:30:48 CEST 2014
//----------------------------------------------------

package plg.aSint;

import java_cup.runtime.*;
import plg.aLex.AnalizadorLexicoYAP;
import plg.aLex.UnidadLexica;
import plg.errores.GestionErroresYAP;
import plg.nodo.*;
import plg.nodo.operadores.*;
import plg.reservadas.*;
import plg.nodo.terminal.*;
import plg.nodo.sentencias.*;
import plg.nodo.control.*;
import plg.nodo.definiciones.*;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Jun 02 15:30:48 CEST 2014
  */
public class AnalizadorSintacticoYAP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoYAP() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoYAP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoYAP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\003\000\002\002\004\000\002\003" +
    "\002\000\002\003\003\000\002\003\004\000\002\004\003" +
    "\000\002\004\005\000\002\005\010\000\002\005\005\000" +
    "\002\033\007\000\002\033\010\000\002\032\012\000\002" +
    "\032\013\000\002\034\005\000\002\034\006\000\002\036" +
    "\004\000\002\036\006\000\002\036\002\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\004\000\002" +
    "\041\003\000\002\041\004\000\002\006\004\000\002\006" +
    "\005\000\002\011\003\000\002\011\004\000\002\010\003" +
    "\000\002\010\004\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\004\000\002\007\003\000\002\030\004\000\002\030" +
    "\003\000\002\031\006\000\002\031\007\000\002\035\003" +
    "\000\002\035\005\000\002\025\004\000\002\025\005\000" +
    "\002\012\003\000\002\012\004\000\002\023\005\000\002" +
    "\015\003\000\002\015\005\000\002\016\003\000\002\016" +
    "\005\000\002\021\003\000\002\021\005\000\002\021\005" +
    "\000\002\017\003\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\020\003\000\002" +
    "\020\005\000\002\020\005\000\002\013\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\014\003\000\002\014\003\000\002\014\004\000" +
    "\002\014\005\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\022\003\000\002\022\003\000\002\024" +
    "\003\000\002\024\004\000\002\024\005\000\002\024\006" +
    "\000\002\042\005\000\002\042\006\000\002\026\007\000" +
    "\002\026\011\000\002\027\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\012\002\uffff\050\013\052\004\062\006\001" +
    "\002\000\004\057\144\001\002\000\004\062\006\001\002" +
    "\000\046\004\210\006\176\012\043\026\104\027\044\030" +
    "\037\035\025\037\024\040\022\041\175\045\206\060\170" +
    "\061\045\062\173\063\052\064\200\065\041\066\046\001" +
    "\002\000\004\062\ufffc\001\002\000\004\002\166\001\002" +
    "\000\004\002\ufffe\001\002\000\004\002\001\001\002\000" +
    "\004\054\015\001\002\000\004\051\142\001\002\000\004" +
    "\060\016\001\002\000\004\055\017\001\002\000\012\035" +
    "\025\037\024\040\022\060\020\001\002\000\010\013\uffec" +
    "\014\uffec\060\uffec\001\002\000\004\060\030\001\002\000" +
    "\010\013\uffed\014\uffed\060\uffed\001\002\000\004\056\026" +
    "\001\002\000\010\013\uffee\014\uffee\060\uffee\001\002\000" +
    "\010\013\uffef\014\uffef\060\uffef\001\002\000\006\051\ufff8" +
    "\054\015\001\002\000\004\051\ufff7\001\002\000\012\006" +
    "\uffe8\007\uffe8\010\uffe8\014\035\001\002\000\004\006\032" +
    "\001\002\000\014\035\025\037\024\040\022\056\ufff4\060" +
    "\020\001\002\000\004\056\ufff3\001\002\000\012\006\uffe7" +
    "\007\uffe7\010\uffe7\014\056\001\002\000\022\012\043\027" +
    "\044\030\037\060\053\061\045\063\052\065\041\066\046" +
    "\001\002\000\010\015\141\027\060\030\062\001\002\000" +
    "\004\061\uffb2\001\002\000\052\006\uffb4\007\uffb4\013\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\042\uffb4\046\uffb4\001\002\000\052\006" +
    "\uffb6\007\uffb6\013\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\042\uffb6\046\uffb6" +
    "\001\002\000\004\061\140\001\002\000\024\012\043\026" +
    "\104\027\044\030\037\060\053\061\045\063\052\065\041" +
    "\066\046\001\002\000\004\061\uffb3\001\002\000\052\006" +
    "\uffb9\007\uffb9\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\042\uffb9\046\uffb9" +
    "\001\002\000\052\006\uffb5\007\uffb5\013\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\042\uffb5\046\uffb5\001\002\000\052\006\uffba\007\uffba" +
    "\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\042\uffba\046\uffba\001\002\000" +
    "\052\006\uffc2\007\uffc2\013\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\027" +
    "\uffc2\030\uffc2\031\065\032\067\033\064\034\066\042\uffc2" +
    "\046\uffc2\001\002\000\052\006\uffbf\007\uffbf\013\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\042\uffbf\046\uffbf\001\002\000\004\060\077" +
    "\001\002\000\056\005\054\006\uffb1\007\uffb1\013\uffb1\014" +
    "\035\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\042\uffb1\046\uffb1\001\002\000\004" +
    "\060\075\001\002\000\056\006\uffb0\007\uffb0\011\uffb0\013" +
    "\uffb0\014\056\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\042\uffb0\046\uffb0\001\002" +
    "\000\022\012\043\027\044\030\037\060\053\061\045\063" +
    "\052\065\041\066\046\001\002\000\010\015\061\027\060" +
    "\030\062\001\002\000\022\012\043\027\044\030\037\060" +
    "\053\061\045\063\052\065\041\066\046\001\002\000\060" +
    "\006\uffac\007\uffac\010\uffac\011\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\042\uffac\046\uffac\001\002\000\022\012\043" +
    "\027\044\030\037\060\053\061\045\063\052\065\041\066" +
    "\046\001\002\000\052\006\uffc0\007\uffc0\013\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\027\uffc0\030\uffc0\031\065\032\067\033\064" +
    "\034\066\042\uffc0\046\uffc0\001\002\000\022\012\043\027" +
    "\044\030\037\060\053\061\045\063\052\065\041\066\046" +
    "\001\002\000\022\012\043\027\044\030\037\060\053\061" +
    "\045\063\052\065\041\066\046\001\002\000\022\012\043" +
    "\027\044\030\037\060\053\061\045\063\052\065\041\066" +
    "\046\001\002\000\022\012\043\027\044\030\037\060\053" +
    "\061\045\063\052\065\041\066\046\001\002\000\052\006" +
    "\uffbd\007\uffbd\013\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\042\uffbd\046\uffbd" +
    "\001\002\000\052\006\uffbb\007\uffbb\013\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\042\uffbb\046\uffbb\001\002\000\052\006\uffbe\007\uffbe" +
    "\013\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\034\uffbe\042\uffbe\046\uffbe\001\002\000" +
    "\052\006\uffbc\007\uffbc\013\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\042\uffbc" +
    "\046\uffbc\001\002\000\052\006\uffc1\007\uffc1\013\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\027\uffc1\030\uffc1\031\065\032\067\033" +
    "\064\034\066\042\uffc1\046\uffc1\001\002\000\056\006\uffaf" +
    "\007\uffaf\011\uffaf\013\uffaf\014\035\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\042" +
    "\uffaf\046\uffaf\001\002\000\056\006\uffae\007\uffae\011\uffae" +
    "\013\uffae\014\056\015\uffae\016\uffae\017\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\042\uffae\046\uffae\001" +
    "\002\000\004\012\100\001\002\000\026\012\043\013\111" +
    "\026\104\027\044\030\037\060\053\061\045\063\052\065" +
    "\041\066\046\001\002\000\006\007\133\013\134\001\002" +
    "\000\024\006\uffcc\007\uffcc\013\uffcc\016\126\017\127\020" +
    "\uffcc\021\uffcc\042\uffcc\046\uffcc\001\002\000\006\007\uffd5" +
    "\013\uffd5\001\002\000\024\012\043\026\104\027\044\030" +
    "\037\060\053\061\045\063\052\065\041\066\046\001\002" +
    "\000\020\006\uffce\007\uffce\013\uffce\020\124\021\uffce\042" +
    "\uffce\046\uffce\001\002\000\016\006\uffd1\007\uffd1\013\uffd1" +
    "\021\122\042\uffd1\046\uffd1\001\002\000\034\006\uffca\007" +
    "\uffca\013\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\113" +
    "\023\115\024\112\025\114\042\uffca\046\uffca\001\002\000" +
    "\040\006\uffc7\007\uffc7\013\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\027\060\030" +
    "\062\042\uffc7\046\uffc7\001\002\000\052\006\uffd7\007\uffd7" +
    "\013\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\042\uffd7\046\uffd7\001\002\000" +
    "\022\012\043\027\044\030\037\060\053\061\045\063\052" +
    "\065\041\066\046\001\002\000\022\012\043\027\044\030" +
    "\037\060\053\061\045\063\052\065\041\066\046\001\002" +
    "\000\022\012\043\027\044\030\037\060\053\061\045\063" +
    "\052\065\041\066\046\001\002\000\022\012\043\027\044" +
    "\030\037\060\053\061\045\063\052\065\041\066\046\001" +
    "\002\000\040\006\uffc3\007\uffc3\013\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\027" +
    "\060\030\062\042\uffc3\046\uffc3\001\002\000\040\006\uffc5" +
    "\007\uffc5\013\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\027\060\030\062\042\uffc5" +
    "\046\uffc5\001\002\000\040\006\uffc4\007\uffc4\013\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\027\060\030\062\042\uffc4\046\uffc4\001\002\000" +
    "\040\006\uffc6\007\uffc6\013\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\027\060\030" +
    "\062\042\uffc6\046\uffc6\001\002\000\022\012\043\027\044" +
    "\030\037\060\053\061\045\063\052\065\041\066\046\001" +
    "\002\000\020\006\uffcd\007\uffcd\013\uffcd\020\124\021\uffcd" +
    "\042\uffcd\046\uffcd\001\002\000\022\012\043\027\044\030" +
    "\037\060\053\061\045\063\052\065\041\066\046\001\002" +
    "\000\024\006\uffcb\007\uffcb\013\uffcb\016\126\017\127\020" +
    "\uffcb\021\uffcb\042\uffcb\046\uffcb\001\002\000\022\012\043" +
    "\027\044\030\037\060\053\061\045\063\052\065\041\066" +
    "\046\001\002\000\022\012\043\027\044\030\037\060\053" +
    "\061\045\063\052\065\041\066\046\001\002\000\034\006" +
    "\uffc8\007\uffc8\013\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\113\023\115\024\112\025\114\042\uffc8\046\uffc8\001" +
    "\002\000\034\006\uffc9\007\uffc9\013\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\113\023\115\024\112\025\114\042" +
    "\uffc9\046\uffc9\001\002\000\014\006\uffd0\007\uffd0\013\uffd0" +
    "\042\uffd0\046\uffd0\001\002\000\024\012\043\026\104\027" +
    "\044\030\037\060\053\061\045\063\052\065\041\066\046" +
    "\001\002\000\052\006\uffd6\007\uffd6\013\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\042\uffd6\046\uffd6\001\002\000\006\007\uffd4\013\uffd4" +
    "\001\002\000\004\013\137\001\002\000\052\006\uffb7\007" +
    "\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\042\uffb7\046\uffb7\001\002" +
    "\000\052\006\uffb8\007\uffb8\013\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\042" +
    "\uffb8\046\uffb8\001\002\000\060\006\uffad\007\uffad\010\uffad" +
    "\011\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\027\uffad" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\042\uffad\046" +
    "\uffad\001\002\000\006\052\143\062\ufff9\001\002\000\004" +
    "\057\144\001\002\000\004\060\147\001\002\000\004\053" +
    "\146\001\002\000\004\062\ufffa\001\002\000\004\012\150" +
    "\001\002\000\014\010\ufff0\035\025\037\024\040\022\060" +
    "\020\001\002\000\004\060\030\001\002\000\004\010\153" +
    "\001\002\000\014\035\025\036\156\037\024\040\022\060" +
    "\020\001\002\000\004\013\160\001\002\000\006\013\uffeb" +
    "\014\035\001\002\000\004\013\uffea\001\002\000\006\013" +
    "\uffe9\014\056\001\002\000\004\062\006\001\002\000\006" +
    "\053\ufff6\057\144\001\002\000\004\053\ufff5\001\002\000" +
    "\006\007\164\010\ufff2\001\002\000\014\010\ufff0\035\025" +
    "\037\024\040\022\060\020\001\002\000\004\010\ufff1\001" +
    "\002\000\004\002\000\001\002\000\054\004\uffe0\006\uffe0" +
    "\012\uffe0\026\uffe0\027\uffe0\030\uffe0\035\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0\060\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\001" +
    "\002\000\050\005\054\006\uffb1\011\uffb1\014\035\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\060\uffec\001\002\000\054\004\uffdf\006\uffdf\012\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\043\uffdf\044\uffdf\045\uffdf\047\uffdf\060\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\001\002\000\046" +
    "\004\235\006\176\012\043\026\104\027\044\030\037\035" +
    "\025\037\024\040\022\041\175\045\206\060\170\061\045" +
    "\062\173\063\052\064\200\065\041\066\046\001\002\000" +
    "\046\004\233\006\176\012\043\026\104\027\044\030\037" +
    "\035\025\037\024\040\022\041\175\045\206\060\170\061" +
    "\045\062\173\063\052\064\200\065\041\066\046\001\002" +
    "\000\004\006\uffdc\001\002\000\024\012\043\026\104\027" +
    "\044\030\037\060\053\061\045\063\052\065\041\066\046" +
    "\001\002\000\054\004\uffe2\006\uffe2\012\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\047\uffe2\060\uffe2\061\uffe2\062\uffe2\063" +
    "\uffe2\064\uffe2\065\uffe2\066\uffe2\001\002\000\054\004\uffe4" +
    "\006\uffe4\012\uffe4\026\uffe4\027\uffe4\030\uffe4\035\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\043\uffe4\044\uffe4\045\uffe4\047\uffe4" +
    "\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066" +
    "\uffe4\001\002\000\026\006\uffd8\012\043\026\104\027\044" +
    "\030\037\060\053\061\045\063\052\065\041\066\046\001" +
    "\002\000\004\006\uffda\001\002\000\042\006\uffba\011\220" +
    "\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\001\002\000\004\006\uffdd\001\002\000\054\004" +
    "\uffde\006\uffde\012\uffde\026\uffde\027\uffde\030\uffde\035\uffde" +
    "\037\uffde\040\uffde\041\uffde\043\uffde\044\uffde\045\uffde\047" +
    "\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde" +
    "\066\uffde\001\002\000\004\060\030\001\002\000\024\012" +
    "\043\026\104\027\044\030\037\060\053\061\045\063\052" +
    "\065\041\066\046\001\002\000\004\006\211\001\002\000" +
    "\010\002\uffe6\053\uffe6\057\uffe6\001\002\000\054\004\uffe1" +
    "\006\uffe1\012\uffe1\026\uffe1\027\uffe1\030\uffe1\035\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\043\uffe1\044\uffe1\045\uffe1\047\uffe1" +
    "\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066" +
    "\uffe1\001\002\000\004\046\213\001\002\000\044\006\176" +
    "\012\043\026\104\027\044\030\037\035\025\037\024\040" +
    "\022\041\175\045\206\060\170\061\045\062\173\063\052" +
    "\064\200\065\041\066\046\001\002\000\046\006\176\012" +
    "\043\026\104\027\044\030\037\035\025\037\024\040\022" +
    "\041\175\045\206\047\215\060\170\061\045\062\173\063" +
    "\052\064\200\065\041\066\046\001\002\000\054\004\uffa9" +
    "\006\uffa9\012\uffa9\026\uffa9\027\uffa9\030\uffa9\035\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\043\uffa9\044\uffa9\045\uffa9\047\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066" +
    "\uffa9\001\002\000\054\004\uffe3\006\uffe3\012\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\035\uffe3\037\uffe3\040\uffe3\041\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\047\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\066\uffe3\001\002\000\004\006" +
    "\uffdb\001\002\000\024\012\043\026\104\027\044\030\037" +
    "\060\053\061\045\063\052\065\041\066\046\001\002\000" +
    "\004\006\uffcf\001\002\000\004\006\uffd9\001\002\000\004" +
    "\042\224\001\002\000\044\006\176\012\043\026\104\027" +
    "\044\030\037\035\025\037\024\040\022\041\175\045\206" +
    "\060\170\061\045\062\173\063\052\064\200\065\041\066" +
    "\046\001\002\000\050\006\176\012\043\026\104\027\044" +
    "\030\037\035\025\037\024\040\022\041\175\043\227\044" +
    "\226\045\206\060\170\061\045\062\173\063\052\064\200" +
    "\065\041\066\046\001\002\000\054\004\uffab\006\uffab\012" +
    "\uffab\026\uffab\027\uffab\030\uffab\035\uffab\037\uffab\040\uffab" +
    "\041\uffab\043\uffab\044\uffab\045\uffab\047\uffab\060\uffab\061" +
    "\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\001\002" +
    "\000\044\006\176\012\043\026\104\027\044\030\037\035" +
    "\025\037\024\040\022\041\175\045\206\060\170\061\045" +
    "\062\173\063\052\064\200\065\041\066\046\001\002\000" +
    "\046\006\176\012\043\026\104\027\044\030\037\035\025" +
    "\037\024\040\022\041\175\044\231\045\206\060\170\061" +
    "\045\062\173\063\052\064\200\065\041\066\046\001\002" +
    "\000\054\004\uffaa\006\uffaa\012\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\035\uffaa\037\uffaa\040\uffaa\041\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\047\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\065\uffaa\066\uffaa\001\002\000\046\004\234\006\176" +
    "\012\043\026\104\027\044\030\037\035\025\037\024\040" +
    "\022\041\175\045\206\060\170\061\045\062\173\063\052" +
    "\064\200\065\041\066\046\001\002\000\054\004\uffd3\006" +
    "\uffd3\012\uffd3\026\uffd3\027\uffd3\030\uffd3\035\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\043\uffd3\044\uffd3\045\uffd3\047\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3" +
    "\001\002\000\054\004\uffd2\006\uffd2\012\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\035\uffd2\037\uffd2\040\uffd2\041\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\047\uffd2\060\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\001\002\000\010\002\uffe5" +
    "\053\uffe5\057\uffe5\001\002\000\004\002\ufffd\001\002\000" +
    "\004\053\240\001\002\000\004\062\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\014\002\007\003\011\004\004\005\006\006" +
    "\010\001\001\000\004\032\236\001\001\000\004\006\235" +
    "\001\001\000\052\007\206\010\176\011\171\012\202\013" +
    "\047\014\050\015\105\016\104\017\106\020\107\021\101" +
    "\022\041\023\173\024\201\025\203\026\166\027\170\030" +
    "\200\031\037\040\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\022\040\020\001\001\000\002\001" +
    "\001\000\004\041\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\026\001\001\000\002\001\001\000\004\042\033\001\001" +
    "\000\002\001\001\000\006\034\032\040\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\013\047\014\050" +
    "\020\035\022\041\024\046\031\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\135\013\047\014\050\015" +
    "\105\016\104\017\106\020\107\021\101\022\041\024\046" +
    "\031\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\013\047\014\050" +
    "\020\056\022\041\024\046\031\037\001\001\000\002\001" +
    "\001\000\014\013\073\014\050\022\041\024\046\031\037" +
    "\001\001\000\002\001\001\000\014\013\062\014\050\022" +
    "\041\024\046\031\037\001\001\000\002\001\001\000\012" +
    "\014\072\022\041\024\046\031\037\001\001\000\012\014" +
    "\071\022\041\024\046\031\037\001\001\000\012\014\070" +
    "\022\041\024\046\031\037\001\001\000\012\014\067\022" +
    "\041\024\046\031\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\012\102\013\047\014\050\015\105\016" +
    "\104\017\106\020\107\021\101\022\041\024\046\031\037" +
    "\035\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\012\131\013\047\014\050\015\105" +
    "\016\104\017\106\020\107\021\101\022\041\024\046\031" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\047\014\050\020\120\022\041\024\046\031\037\001\001" +
    "\000\016\013\047\014\050\020\117\022\041\024\046\031" +
    "\037\001\001\000\016\013\047\014\050\020\116\022\041" +
    "\024\046\031\037\001\001\000\016\013\047\014\050\020" +
    "\115\022\041\024\046\031\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\013\047\014\050\016\122\017\106\020\107\021\101" +
    "\022\041\024\046\031\037\001\001\000\002\001\001\000" +
    "\022\013\047\014\050\017\106\020\107\021\124\022\041" +
    "\024\046\031\037\001\001\000\002\001\001\000\020\013" +
    "\047\014\050\017\130\020\107\022\041\024\046\031\037" +
    "\001\001\000\020\013\047\014\050\017\127\020\107\022" +
    "\041\024\046\031\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\012\134\013\047\014" +
    "\050\015\105\016\104\017\106\020\107\021\101\022\041" +
    "\024\046\031\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\151\040\150\001\001\000" +
    "\004\041\162\001\001\000\002\001\001\000\006\037\153" +
    "\040\154\001\001\000\002\001\001\000\004\042\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\160" +
    "\001\001\000\004\032\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\164\040\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\054\001\001\000\002\001\001\000\050\007\206\010\215" +
    "\012\202\013\047\014\050\015\105\016\104\017\106\020" +
    "\107\021\101\022\041\023\173\024\201\025\203\026\166" +
    "\027\170\030\200\031\037\040\204\001\001\000\052\007" +
    "\206\010\176\011\231\012\202\013\047\014\050\015\105" +
    "\016\104\017\106\020\107\021\101\022\041\023\173\024" +
    "\201\025\203\026\166\027\170\030\200\031\037\040\204" +
    "\001\001\000\002\001\001\000\030\012\222\013\047\014" +
    "\050\015\105\016\104\017\106\020\107\021\101\022\041" +
    "\024\046\031\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\012\221\013\047\014\050\015\105\016\104" +
    "\017\106\020\107\021\101\022\041\024\046\031\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\216\001\001\000\030\012" +
    "\211\013\047\014\050\015\105\016\104\017\106\020\107" +
    "\021\101\022\041\024\046\031\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\007\206\010\176\011\213\012\202\013\047\014" +
    "\050\015\105\016\104\017\106\020\107\021\101\022\041" +
    "\023\173\024\201\025\203\026\166\027\170\030\200\031" +
    "\037\040\204\001\001\000\050\007\206\010\215\012\202" +
    "\013\047\014\050\015\105\016\104\017\106\020\107\021" +
    "\101\022\041\023\173\024\201\025\203\026\166\027\170" +
    "\030\200\031\037\040\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\012\220\013\047" +
    "\014\050\015\105\016\104\017\106\020\107\021\101\022" +
    "\041\024\046\031\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\007\206\010\176\011" +
    "\224\012\202\013\047\014\050\015\105\016\104\017\106" +
    "\020\107\021\101\022\041\023\173\024\201\025\203\026" +
    "\166\027\170\030\200\031\037\040\204\001\001\000\050" +
    "\007\206\010\215\012\202\013\047\014\050\015\105\016" +
    "\104\017\106\020\107\021\101\022\041\023\173\024\201" +
    "\025\203\026\166\027\170\030\200\031\037\040\204\001" +
    "\001\000\002\001\001\000\052\007\206\010\176\011\227" +
    "\012\202\013\047\014\050\015\105\016\104\017\106\020" +
    "\107\021\101\022\041\023\173\024\201\025\203\026\166" +
    "\027\170\030\200\031\037\040\204\001\001\000\050\007" +
    "\206\010\215\012\202\013\047\014\050\015\105\016\104" +
    "\017\106\020\107\021\101\022\041\023\173\024\201\025" +
    "\203\026\166\027\170\030\200\031\037\040\204\001\001" +
    "\000\002\001\001\000\050\007\206\010\215\012\202\013" +
    "\047\014\050\015\105\016\104\017\106\020\107\021\101" +
    "\022\041\023\173\024\201\025\203\026\166\027\170\030" +
    "\200\031\037\040\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoYAP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoYAP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoYAP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresYAP();
   AnalizadorLexicoYAP yap = (AnalizadorLexicoYAP)getScanner();
   yap.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresYAP errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoYAP$actions {
  private final AnalizadorSintacticoYAP parser;

  /** Constructor */
  CUP$AnalizadorSintacticoYAP$actions(AnalizadorSintacticoYAP parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoYAP$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoYAP$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoYAP$parser,
    java.util.Stack            CUP$AnalizadorSintacticoYAP$stack,
    int                        CUP$AnalizadorSintacticoYAP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoYAP$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoYAP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // principal ::= inicio 
            {
              Programa RESULT =null;
		Programa ini = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = ini; 
	   	  ArbolRef.arbol=ini;
	   
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("principal",0, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= principal EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoYAP$parser.done_parsing();
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Programa RESULT =null;

              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("inicio",1, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= bloque 
            {
              Programa RESULT =null;
		ListaSentencias blo = (ListaSentencias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 Programa p = new Programa();
	         p.addCodigo(blo);
	         RESULT = p; 
	      
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("inicio",1, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= definicion_principio bloque 
            {
              Programa RESULT =null;
		Programa def = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		ListaSentencias blo = (ListaSentencias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 def.addCodigo(blo);
	         RESULT = def;
	      
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("inicio",1, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // definicion_principio ::= definicion_struct_proc 
            {
              Programa RESULT =null;
		Programa dsp = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = dsp; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("definicion_principio",2, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definicion_principio ::= DEFPROC definicion_proc ENDDEFPROC 
            {
              Programa RESULT =null;
		Vector<Procedure> vp = (Vector<Procedure>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 DefinicionProcedure dp = new DefinicionProcedure();
	         for(int i=0; i<vp.size(); i++)
		    dp.addProcedure(vp.elementAt(i));
		 Programa p = new Programa();
		 p.addProcedure(dp);
		 RESULT = p;
	      
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("definicion_principio",2, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definicion_struct_proc ::= DEFSTRUCT definicion_struct ENDDEFSTRUCT DEFPROC definicion_proc ENDDEFPROC 
            {
              Programa RESULT =null;
		Vector<Struct> ds = (Vector<Struct>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-4)).value;
		Vector<Procedure> vp = (Vector<Procedure>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 Programa p = new Programa();

	      	 DefinicionStruct defst = new DefinicionStruct();
	         for (int i = 0; i < ds.size(); i++)
	             defst.addStruct(ds.elementAt(i));
	  	 
		 DefinicionProcedure dp = new DefinicionProcedure();
	         for(int i=0; i<vp.size(); i++)
		    dp.addProcedure(vp.elementAt(i));
		

		p.addStruct(defst);
		p.addProcedure(dp);
	        RESULT = p; 
	     
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("definicion_struct_proc",3, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definicion_struct_proc ::= DEFSTRUCT definicion_struct ENDDEFSTRUCT 
            {
              Programa RESULT =null;
		Vector<Struct> ds = (Vector<Struct>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 DefinicionStruct defst = new DefinicionStruct();
	        for (int i = 0; i < ds.size(); i++)
	            defst.addStruct(ds.elementAt(i));
		Programa p = new Programa();
		p.addStruct(defst);
	        RESULT = p; 
	     
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("definicion_struct_proc",3, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definicion_struct ::= STRUCT IDENTIFICADOR IS lista_declaracion ENDSTRUCT 
            {
              Vector<Struct> RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-3)).value;
		Vector<Declaracion> ld = (Vector<Declaracion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 Struct str = new Struct (id);
	         for (int i = 0; i < ld.size(); i++)
	      	     str.addDeclaracion(ld.elementAt(i));
	         Vector<Struct> miv = new Vector<Struct>();
	         miv.add(str);
	         RESULT = miv; 
	      
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("definicion_struct",25, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // definicion_struct ::= STRUCT IDENTIFICADOR IS lista_declaracion ENDSTRUCT definicion_struct 
            {
              Vector<Struct> RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-4)).value;
		Vector<Declaracion> ldec = (Vector<Declaracion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Vector<Struct> defst = (Vector<Struct>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 
	         Struct str = new Struct(id);
	         for (int i = 0; i < ldec.size(); i++)
	      	     str.addDeclaracion(ldec.elementAt(i));
	         defst.insertElementAt(str,0);
	         RESULT = defst;
	      
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("definicion_struct",25, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // definicion_proc ::= PROCEDURE IDENTIFICADOR PAR_ABRE lista_parametros DOS_PUNTOS tipo_especial PAR_CIERRE bloque 
            {
              Vector<Procedure> RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-6)).value;
		Vector<Declaracion> in = (Vector<Declaracion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-4)).value;
		Tipo out = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		ListaSentencias c = (ListaSentencias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		  Vector<Procedure> vp = new Vector<Procedure>();
	          vp.add(new Procedure(id, in, out, c));
		  RESULT = vp;
	      
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("definicion_proc",24, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // definicion_proc ::= PROCEDURE IDENTIFICADOR PAR_ABRE lista_parametros DOS_PUNTOS tipo_especial PAR_CIERRE bloque definicion_proc 
            {
              Vector<Procedure> RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-7)).value;
		Vector<Declaracion> in = (Vector<Declaracion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-5)).value;
		Tipo out = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-3)).value;
		ListaSentencias c = (ListaSentencias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		Vector<Procedure> vp = (Vector<Procedure>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		  vp.insertElementAt(new Procedure(id, in, out, c),0);
	          RESULT = vp;
	      
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("definicion_proc",24, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_declaracion ::= tipo declaracion PUNTO_COMA 
            {
              Vector<Declaracion> RESULT =null;
		Tipo t1 = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		PairAux dec1 = (PairAux)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 Vector<Declaracion> miv = new Vector<Declaracion>();
	      miv.add(new Declaracion(t1, dec1));
	      RESULT = miv;
	   
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("lista_declaracion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_declaracion ::= tipo declaracion PUNTO_COMA lista_declaracion 
            {
              Vector<Declaracion> RESULT =null;
		Tipo t2 = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-3)).value;
		PairAux dec2 = (PairAux)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Vector<Declaracion> miv = (Vector<Declaracion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 Declaracion d = new Declaracion(t2, dec2);
	      miv.insertElementAt(d,0);
	      RESULT = miv;
	   
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("lista_declaracion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_parametros ::= tipo declaracion 
            {
              Vector<Declaracion> RESULT =null;
		Tipo t1 = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		PairAux dec1 = (PairAux)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 Declaracion d = new Declaracion(t1, dec1);
	      Vector<Declaracion> miv = new Vector<Declaracion>();
	      miv.add(d);
	      RESULT = miv;
	   
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_parametros ::= tipo declaracion COMA lista_parametros 
            {
              Vector<Declaracion> RESULT =null;
		Tipo t2 = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-3)).value;
		PairAux dec2 = (PairAux)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Vector<Declaracion> miv = (Vector<Declaracion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 Declaracion d = new Declaracion(t2, dec2);
	      miv.insertElementAt(d,0);
	      RESULT = miv;
	   
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_parametros ::= 
            {
              Vector<Declaracion> RESULT =null;
		 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(T_Tipo.INT); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("tipo",30, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(T_Tipo.CHAR); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("tipo",30, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(T_Tipo.BOOL); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("tipo",30, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= IDENTIFICADOR 
            {
              Tipo RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new Tipo(T_Tipo.IDENTIFICADOR, id); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("tipo",30, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_especial ::= tipo 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("tipo_especial",29, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_especial ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(T_Tipo.VOID); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("tipo_especial",29, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_especial ::= tipo apertura_arrays 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		Vector<Expresion> a = (Vector<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 t.setDimensions(a);
	        RESULT = t;  
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("tipo_especial",29, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion ::= IDENTIFICADOR 
            {
              PairAux RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new PairAux(id,null); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("declaracion",31, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion ::= IDENTIFICADOR apertura_arrays 
            {
              PairAux RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		Vector<Expresion> a = (Vector<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new PairAux(id,a); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("declaracion",31, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque ::= BEGIN END 
            {
              ListaSentencias RESULT =null;

              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("bloque",4, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloque ::= BEGIN lista_sentencias END 
            {
              ListaSentencias RESULT =null;
		ListaSentencias ls = (ListaSentencias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 RESULT = ls; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("bloque",4, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_sentencias ::= sentencia_punto_coma 
            {
              ListaSentencias RESULT =null;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new ListaSentencias(s); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",7, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_sentencias ::= lista_sentencias sentencia_punto_coma 
            {
              ListaSentencias RESULT =null;
		ListaSentencias ls = (ListaSentencias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 ls.addSentencia(s);
	        RESULT = ls;  
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",7, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia_punto_coma ::= PUNTO_COMA 
            {
              Sentencia RESULT =null;

              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("sentencia_punto_coma",6, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia_punto_coma ::= sentencia PUNTO_COMA 
            {
              Sentencia RESULT =null;
		Sentencia sent = (Sentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 RESULT = sent; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("sentencia_punto_coma",6, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia_punto_coma ::= expresion_condicional 
            {
              Sentencia RESULT =null;
		Sentencia exp = (Sentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("sentencia_punto_coma",6, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia_punto_coma ::= expresion_bucle 
            {
              Sentencia RESULT =null;
		Sentencia expb = (Sentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = expb; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("sentencia_punto_coma",6, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia_punto_coma ::= expresion_compuesta 
            {
              Sentencia RESULT =null;
		Sentencia n3 = (Sentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = n3; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("sentencia_punto_coma",6, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= expresion 
            {
              Sentencia RESULT =null;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = n1; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("sentencia",5, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= expresion_asignacion 
            {
              Sentencia RESULT =null;
		Asignacion n2 = (Asignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = n2; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("sentencia",5, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= tipo declaracion 
            {
              Sentencia RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		PairAux n4 = (PairAux)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new Declaracion(t, n4); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("sentencia",5, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= expresion_return 
            {
              Sentencia RESULT =null;
		Sentencia n5 = (Sentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = n5; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("sentencia",5, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_return ::= RETURN expresion 
            {
              Sentencia RESULT =null;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new Return(ex); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_return",22, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion_return ::= RETURN 
            {
              Sentencia RESULT =null;
		 RESULT = new Return(); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_return",22, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion_call ::= CALL IDENTIFICADOR PAR_ABRE PAR_CIERRE 
            {
              Call RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		 RESULT = new Call(id); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_call",23, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion_call ::= CALL IDENTIFICADOR PAR_ABRE lista_parametros_llamada PAR_CIERRE 
            {
              Call RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-3)).value;
		Vector<Expresion> miv = (Vector<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 Call cl = new Call(id);
	        for (int i = 0; i < miv.size(); i++)
	        	  cl.addParametro(miv.elementAt(i));
	        RESULT = cl;
	     
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_call",23, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_parametros_llamada ::= expresion 
            {
              Vector<Expresion> RESULT =null;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 Vector<Expresion> miv = new Vector<Expresion>();
	        miv.add(n);
	        RESULT = miv;
	     
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("lista_parametros_llamada",27, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista_parametros_llamada ::= lista_parametros_llamada COMA expresion 
            {
              Vector<Expresion> RESULT =null;
		Vector<Expresion> miv = (Vector<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 miv.add(exp);
	        RESULT = miv;
	     
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("lista_parametros_llamada",27, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion_compuesta ::= BEGIN END 
            {
              Sentencia RESULT =null;

              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_compuesta",19, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_compuesta ::= BEGIN lista_sentencias END 
            {
              Sentencia RESULT =null;
		ListaSentencias ls = (ListaSentencias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 RESULT = ls; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_compuesta",19, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion_o_logica 
            {
              Expresion RESULT =null;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion",8, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= NOT expresion 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpUnario(T_OpsUnarias.NOT,exp); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion",8, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion_asignacion ::= expresion_primaria IGUAL expresion 
            {
              Asignacion RESULT =null;
		Terminal ep = (Terminal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new Asignacion(ep, exp);  
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_asignacion",17, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion_o_logica ::= expresion_y_logica 
            {
              Expresion RESULT =null;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_o_logica",11, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_o_logica ::= expresion_o_logica OR expresion_y_logica 
            {
              Expresion RESULT =null;
		Expresion eyl = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion ei = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpBinario(eyl,T_Operaciones.OR,ei); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_o_logica",11, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_y_logica ::= expresion_igualdad 
            {
              Expresion RESULT =null;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_y_logica",12, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_y_logica ::= expresion_y_logica AND expresion_igualdad 
            {
              Expresion RESULT =null;
		Expresion eyl = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion ei = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpBinario(eyl,T_Operaciones.AND,ei); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_y_logica",12, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion_igualdad ::= expresion_relacional 
            {
              Expresion RESULT =null;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_igualdad",15, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion_igualdad ::= expresion_igualdad IGUAL_IGUAL expresion_relacional 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpBinario(e1,T_Operaciones.IGUAL,e2); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_igualdad",15, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion_igualdad ::= expresion_igualdad DISTINTO expresion_relacional 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpBinario(e1,T_Operaciones.DISTINTO,e2); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_igualdad",15, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion_relacional ::= expresion_aditiva 
            {
              Expresion RESULT =null;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_relacional",13, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_relacional ::= expresion_relacional MENOR expresion_aditiva 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpBinario(e1,T_Operaciones.MENOR,e2); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_relacional",13, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion_relacional ::= expresion_relacional MENOR_IGUAL expresion_aditiva 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpBinario(e1,T_Operaciones.MENOR_IGUAL,e2); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_relacional",13, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion_relacional ::= expresion_relacional MAYOR expresion_aditiva 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpBinario(e1,T_Operaciones.MAYOR,e2); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_relacional",13, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion_relacional ::= expresion_relacional MAYOR_IGUAL expresion_aditiva 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpBinario(e1,T_Operaciones.MAYOR_IGUAL,e2); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_relacional",13, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion_aditiva ::= expresion_multiplicativa 
            {
              Expresion RESULT =null;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_aditiva",14, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion_aditiva ::= expresion_aditiva MAS expresion_multiplicativa 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpBinario(e1,T_Operaciones.MAS,e2); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_aditiva",14, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion_aditiva ::= expresion_aditiva MENOS expresion_multiplicativa 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpBinario(e1,T_Operaciones.MENOS,e2); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_aditiva",14, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion_multiplicativa ::= expresion_postfija 
            {
              Expresion RESULT =null;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_multiplicativa",9, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion_multiplicativa ::= expresion_multiplicativa MULT expresion_postfija 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpBinario(e1,T_Operaciones.MULT,e2); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_multiplicativa",9, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion_multiplicativa ::= expresion_multiplicativa DIV expresion_postfija 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpBinario(e1,T_Operaciones.DIV,e2); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_multiplicativa",9, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion_multiplicativa ::= expresion_multiplicativa MOD expresion_postfija 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpBinario(e1,T_Operaciones.MOD,e2); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_multiplicativa",9, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion_multiplicativa ::= expresion_multiplicativa POT expresion_postfija 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new NodoOpBinario(e1,T_Operaciones.POT,e2); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_multiplicativa",9, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion_postfija ::= expresion_primaria 
            {
              Expresion RESULT =null;
		Terminal exppr = (Terminal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = exppr; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_postfija",10, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion_postfija ::= NUMERO 
            {
              Expresion RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new Terminal(T_Terminal.NUMERO, n); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_postfija",10, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion_postfija ::= expresion_unaria NUMERO 
            {
              Expresion RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		String nn = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new Terminal(T_Terminal.NUMERO,nn, n); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_postfija",10, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion_postfija ::= PAR_ABRE expresion PAR_CIERRE 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_postfija",10, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion_postfija ::= TRUE 
            {
              Expresion RESULT =null;
		 RESULT = new Terminal(T_Terminal.TRUE); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_postfija",10, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion_postfija ::= FALSE 
            {
              Expresion RESULT =null;
		 RESULT = new Terminal(T_Terminal.FALSE); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_postfija",10, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion_postfija ::= expresion_call 
            {
              Expresion RESULT =null;
		Call n6 = (Call)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = n6; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_postfija",10, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion_unaria ::= MAS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_unaria",16, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion_unaria ::= MENOS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_unaria",16, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion_primaria ::= IDENTIFICADOR 
            {
              Terminal RESULT =null;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new Terminal(T_Terminal.IDENTIFICADOR, id1); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_primaria",18, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion_primaria ::= IDENTIFICADOR apertura_arrays 
            {
              Terminal RESULT =null;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		Vector<Expresion> ap = (Vector<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new Terminal(T_Terminal.IDENTIFICADOR, id2, ap); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_primaria",18, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion_primaria ::= IDENTIFICADOR PUNTO IDENTIFICADOR 
            {
              Terminal RESULT =null;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-2)).value;
		String id4 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new Terminal(T_Terminal.STRUCT, id3, id4);  
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_primaria",18, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion_primaria ::= IDENTIFICADOR PUNTO IDENTIFICADOR apertura_arrays 
            {
              Terminal RESULT =null;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-3)).value;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		Vector<Expresion> ap = (Vector<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.peek()).value;
		 RESULT = new Terminal(T_Terminal.STRUCT, id1, id2, ap); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_primaria",18, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // apertura_arrays ::= CORCH_ABRE expresion_aditiva CORCH_CIERRE 
            {
              Vector<Expresion> RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 Vector<Expresion> ve = new Vector<Expresion>();
	        ve.add(e); 
		RESULT = ve;
             
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("apertura_arrays",32, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // apertura_arrays ::= apertura_arrays CORCH_ABRE expresion_aditiva CORCH_CIERRE 
            {
              Vector<Expresion> RESULT =null;
		Vector<Expresion> ve = (Vector<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-3)).value;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 ve.add(e);
	        RESULT = ve;  
	     
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("apertura_arrays",32, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion_condicional ::= IF expresion THEN lista_sentencias ENDIF 
            {
              Sentencia RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-3)).value;
		ListaSentencias ls = (ListaSentencias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 RESULT = new Condicional(e1,ls); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_condicional",20, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion_condicional ::= IF expresion THEN lista_sentencias ELSE lista_sentencias ENDIF 
            {
              Sentencia RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-5)).value;
		ListaSentencias ls = (ListaSentencias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-3)).value;
		ListaSentencias lss = (ListaSentencias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 RESULT = new Condicional(e1,ls,lss); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_condicional",20, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion_bucle ::= WHILE expresion DO lista_sentencias ENDWHILE 
            {
              Sentencia RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-3)).value;
		ListaSentencias ls = (ListaSentencias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoYAP$stack.elementAt(CUP$AnalizadorSintacticoYAP$top-1)).value;
		 RESULT = new While(e,ls); 
              CUP$AnalizadorSintacticoYAP$result = parser.getSymbolFactory().newSymbol("expresion_bucle",21, RESULT);
            }
          return CUP$AnalizadorSintacticoYAP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoYAP$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoYAP$do_action(
    int                        CUP$AnalizadorSintacticoYAP$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoYAP$parser,
    java.util.Stack            CUP$AnalizadorSintacticoYAP$stack,
    int                        CUP$AnalizadorSintacticoYAP$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoYAP$do_action_part00000000(
                               CUP$AnalizadorSintacticoYAP$act_num,
                               CUP$AnalizadorSintacticoYAP$parser,
                               CUP$AnalizadorSintacticoYAP$stack,
                               CUP$AnalizadorSintacticoYAP$top);
    }
}

